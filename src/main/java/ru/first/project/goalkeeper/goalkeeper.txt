                                            Игра "Вратарь"

Цель игры: форвард должен забросить шайбу в ворота.
Форвард (нападающий) наносит бросок по воротам, выбирая силу и направление броска.

Параметры:
    1) Сила броска может быть от 1 до 100.
       Соответственно, выбирая силу броска, мы вводим цифру.

    2) Направления классические: левая(№1) \правая(№2) девятка, левый(№3)\правый(№4) нижний угол, домик(№5).
       Соответственно, выбирая направление, мы вводим одну из пяти цифр.

    3) В зависимости от силы броска, меняется точность, т.е. вероятность идеального попадания.
       Чем сильнее бросок, тем меньше точность.
       При силе броска: от 75 до 100 - точность 25%
                        от 50 до 75  - точность 50%
                        от 25 до 50  - точность 75%
                        от 0 до 25   - точность 100%

Первый этап:
1) Заполнить класс Forward.
2) Создать класс, в котором будет метод, рассчитывающий попал ли нападающий по воротам или нет.
3) В методе должена выводиться в консоль информация, в которой будет написана сила, с которой игрок
   бросил по воротам, точность броска, шанс попадания и резултат - попал ли он по воротам.
4) Рассчет того, попал ли форвард по воротам или нет, происводится по следующему алгоритму:
        В методе рандомно генерируется число от 1 до 100. Это шанс попадания.
        Если точность попадания больше шанса попадания, значит игрок попал.
        Если точность попадания меньше шанса попадания, значит игрок промахнулся.

### Пример:
        1) Нападающий совершает бросок с силой 60, значит его точность 50%.
           Рандомно сгенерированное число (шанс) - 40.
           50 (точность) больше 40 (шанс), значит форвард попал.

        2) Нападающий совершает бросок с силой 90, значит его точность 25%.
           Рандомно сгенерированное число (шанс) - 50.
           25 (точность) меньше 50 (шанс), значит форвард промахнулся.


Второй этап:
Цель: Научиться использовать проценты в Java приложении, сравнивать строки на равность,
      заполнять класс на этапе запуска приложения.

1) Заполнить класс Goalkeeper.
У вратаря есть следующие навыки:
* Игра ловушкой (левый вверх №1)
* Игра блином (правый вверх №2)
* Игра левым щитком (левый низ №3)
* Игра правым щитком (правый низ №4)
* Смыкание щитков (домик №5)

* Вратарь может иметь стиль стойки: бабочка (Butterfly) или игра "в стойке" (StandUp)
При стиле Butterfly, вратарь лучше перекрывает низ и домик, но оставляет открытым верх.
При стиле StandUp, вратарь отлично перекрывает верха, но слабо закрывает низ и домик.

* Так же вратарь имеет навык скорости перемещения. Если нападающий игрок пытается расскачать и объехать вратаря, вратарь
может среагировать и успеть переместиться, закрыв угол.

2) Сгенерировать вратаря на этапе запуска приложения.
   Должен быть 1 итоговый метод, который создает вратаря со всеми характеристиками:

* Скорость перемещения вратаря: 20-65%

* Для верхних углов: 45-65%
* Шанс отбития шайбы для нижних углов: 50-70%
* Для домика: 40-60%

 StandUp является устаревшим стилем, поэтому шанс того,что вратарь использует данную стойку - 30%.
 Соответвенно, что будет стойка Butterfly - 70%.

 Если стойка Butterfly - то вратарь имеет +10% к защите по низу и домика и -10% к защите верха.
 Скорость перемещения -10%

 Если стойка StandUp - то вратарь имеет +10% к защите верха и -10% к защите по низу и домика.
 Скорость перемещения +10%

3) Вывести в консоль все параметры этапа создания вратаря.

 ### Пример:
        На этапе запуска приложения создается вратарь с рандомными характеристиками:
        * левый вверх (№1)                 45%
        * правый вверх (№2)                60%
        * левый низ (№3)                   55%
        * правый низ (№4)                  70%
        * домик (№5)                       40%
        * Скорость перемещения вратаря:    60%

        Стиль стойки вратаря - StandUp, значит итоговые характеристики вратаря:
        * левый вверх (№1)                45% + 10% = 55%
        * правый вверх (№2)               60% + 10% = 70%
        * левый низ (№3)                  55% - 10% = 45%
        * правый низ (№4)                 70% - 10% = 60%
        * домик (№5)                      40% - 10% = 30%
        * Скорость перемещения вратаря:   60% + 10% = 70%
        сравнение строк в Java